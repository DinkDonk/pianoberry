#!/bin/sh

URL="http://repo.tinycorelinux.net"

PACKAGES="
	alsa.tcz
	bzip2-lib.tcz
	expat2.tcz
	freetype.tcz
	glib2.tcz
	graphite2.tcz
	harfbuzz.tcz
	libasound.tcz
	libdrm.tcz
	libGLES.tcz
	liblzma.tcz
	libpng.tcz
	libX11.tcz
	libXau.tcz
	libXaw.tcz
	libxcb.tcz
	libXdmcp.tcz
	libXext.tcz
	libXfixes.tcz
	libxshmfence.tcz
	libxml2.tcz
	libXxf86vm.tcz
	libzstd.tcz
	llvm19-lib.tcz
	mesa.tcz
	pcre2.tcz
"

echo "Building with:"
echo "  serial: ${PIANOTEQ_SERIAL}"
echo "  initial preset: ${PIANOTEQ_INITIAL_PRESET}"

mkdir -p /build/src
cd /build/src

function download_file() {
	if [ ! -f "${1##*/}" ]; then
		echo "Downloading ${1}"
		wget ${1}
		if [[ $? -ne 0 ]]; then
			echo "Failed to download ${1}"
			rm -f ${1##*/}

			if [[ $2 -eq 1 ]]; then
				return 1
			else
				exit 1
			fi
		fi
	else
		echo "${1##*/} already exists, skipping download"
	fi
}

function download_tcz() {
	download_file ${URL}/15.x/aarch64/tcz/${1}.tree 1

	if [[ $? -ne 0 ]]; then
		download_file ${URL}/15.x/aarch64/tcz/${1}
		return
	fi

	for file in `cat ${1}.tree`; do
		download_file ${URL}/15.x/aarch64/tcz/${file}

		# Check if the file ends with "v8.tcz"
		if echo "${file}" | grep -q "v8.tcz$"; then
			# Replace "v8.tcz" with "v8-16k.tcz" and download the additional file
			additional_file=$(echo "${file}" | sed 's/v8\.tcz$/v8-16k.tcz/')
			download_file ${URL}/15.x/aarch64/tcz/${additional_file}
		fi
	done
}

download_file ${URL}/15.x/aarch64/releases/RPi/piCore64-15.0.0.zip

for package in $PACKAGES; do
	download_tcz $package
done

cd /pianoberry/pianoberry

unzip /build/src/piCore64-15.0.0.zip

dd bs=512 seek=471039 of=pianoberry.img < /dev/null
parted --script pianoberry.img \
	mklabel msdos \
	mkpart primary fat32 8192s 243711s \
	mkpart primary ext4 243712s 100%

TARGET_LOOP=$(kpartx -av pianoberry.img | awk 'NR==1 {print substr($3, 1, length($3)-2)}')

mkdir -p p1 p2

mkfs.vfat -F 32 -n pianoberry /dev/mapper/${TARGET_LOOP}p1
mkfs.ext4 -L data /dev/mapper/${TARGET_LOOP}p2

mount /dev/mapper/${TARGET_LOOP}p1 p1
mount /dev/mapper/${TARGET_LOOP}p2 p2

sync

SOURCE_LOOP=$(kpartx -av piCore64-15.0.0.img | awk 'NR==1 {print substr($3, 1, length($3)-2)}')

mkdir -p source_p1 source_p2

mount /dev/mapper/${SOURCE_LOOP}p1 source_p1
mount /dev/mapper/${SOURCE_LOOP}p2 source_p2

rsync -a source_p1/ p1/
rsync -a source_p2/ p2/

sync

echo "Source image info:"
fdisk -l piCore64-15.0.0.img
df -h source_p1
df -h source_p2

echo "Target image info:"
fdisk -l pianoberry.img
df -h p1
df -h p2

# Set hostname
echo -n " pianoberry" > p1/cmdline.txt

cd /build/src

function install_tcz() {
	# Some tczs don't have a .tree file
	if [ ! -f "${1}.tree" ]; then
		echo "Installing ${1}"
		cp ${1}* /pianoberry/pianoberry/p2/tce/optional
		return
	fi

	for file in `cat ${1}.tree`; do
		# Don't copy if file exists
		if [ -f "/pianoberry/pianoberry/p2/tce/optional/${file}" ]; then
			continue
		fi

		echo "Installing ${file}"
		cp ${file}* /pianoberry/pianoberry/p2/tce/optional

		if echo "${file}" | grep -q "v8.tcz$"; then
			additional_file=$(echo "${file}" | sed 's/v8\.tcz$/v8-16k.tcz/')
			echo "Installing ${additional_file}"
			cp ${additional_file}* /pianoberry/pianoberry/p2/tce/optional
		fi
	done
}

# Install the required extensions
for package in $PACKAGES; do
	install_tcz $package
done

# Enable the installed extensions
for package in $PACKAGES; do
	echo $package >> /pianoberry/pianoberry/p2/tce/onboot.lst
done

echo alsa-modules-6.6.47-piCore-v8-16k.tcz >> /pianoberry/pianoberry/p2/tce/onboot.lst

# Disable internal sound card
sed -i 's/dtparam=audio=on/#dtparam=audio=on/g' /pianoberry/pianoberry/p1/config.txt

# Unpack the rootfs
mkdir -p /pianoberry/pianoberry/tempdir
cd /pianoberry/pianoberry/tempdir
zcat ../p1/rootfs-piCore64-15.0.gz | cpio -i

# Add Pianoteq configs
mkdir -p root/.config/Modartt
mkdir -p root/.local/share/Modartt/Pianoteq/MidiMappings

install -m 644 ../Pianoteq84.prefs root/.config/Modartt/
install -m 644 ../midi-map.ptm root/.local/share/Modartt/Pianoteq/MidiMappings/

# Add Pianoteq binary
install -m 777 "../Pianoteq 8" usr/bin/
chmod +x "usr/bin/Pianoteq 8"

# Add Pianoteq startup script
install -m 777 ../startup.sh usr/bin/
chmod +x "usr/bin/startup.sh"

mkdir -p /pianoberry/pianoberry/mydata
cd /pianoberry/pianoberry/mydata
tar -xpvzf ../mydata.tgz

# Start Pianoteq on boot
echo "/usr/bin/startup.sh" >> opt/bootlocal.sh

tar -cpvzf ../mydata.tgz .

cd /pianoberry/pianoberry

cp mydata.tgz p2/tce/

# Load pianoberry rootfs instead of the original one
sed -i 's/rootfs-piCore64-15\.0/rootfs-pianoberry/g' p1/config.txt

# Add Pianoberry default configs to pi/config.txt
cat <<EOF >> p1/config.txt

[PIANOBERRY]
pianoteq_serial=
pianoteq_initial_preset=U4 Felt II
EOF

echo "Creating the image. This may take a while..."

# Repack the rootfs
cd tempdir
find . | cpio -o -H newc | gzip > ../rootfs-pianoberry.gz
cd /pianoberry/pianoberry
advdef -z4 rootfs-pianoberry.gz
rm -f p1/rootfs-piCore64-15.0.gz
cp rootfs-pianoberry.gz p1/

sync

echo "Pianoberry image info:"
fdisk -l pianoberry.img
df -h p1
df -h p2

umount p1 p2 source_p1 source_p2
kpartx -d /dev/${SOURCE_LOOP}
kpartx -d /dev/${TARGET_LOOP}

# Copy the image to the host
cp pianoberry.img /build/pianoberry.img
