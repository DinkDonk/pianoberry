#!/bin/sh

PIANOTEQ_SERIAL=$SERIAL
PIANOTEQ_INITIAL_PRESET=$INITIAL_PRESET

URL="http://repo.tinycorelinux.net"

echo "Building!"

mkdir -p /build/src
cd /build/src

function download_file() {
	if [ ! -f "${1##*/}" ]; then
		echo "Downloading ${1}"
		wget ${1}
		if [[ $? -ne 0 ]]; then
			echo "Failed to download ${1}"
			rm -f ${1##*/}

			if [[ $2 -eq 1 ]]; then
				return 1
			else
				exit 1
			fi
		fi
	else
		echo "${1##*/} already exists, skipping download"
	fi
}

function download_tcz() {
	download_file ${URL}/15.x/aarch64/tcz/${1}.tree 1

	if [[ $? -ne 0 ]]; then
		download_file ${URL}/15.x/aarch64/tcz/${1}
		return
	fi

	for file in `cat ${1}.tree`; do
		download_file ${URL}/15.x/aarch64/tcz/${file}

		# Check if the file ends with "v8.tcz"
		if echo "${file}" | grep -q "v8.tcz$"; then
			# Replace "v8.tcz" with "v8-16k.tcz" and download the additional file
			additional_file=$(echo "${file}" | sed 's/v8\.tcz$/v8-16k.tcz/')
			download_file ${URL}/15.x/aarch64/tcz/${additional_file}
		fi
	done
}

download_file ${URL}/15.x/aarch64/releases/RPi/piCore64-15.0.0.zip

download_tcz alsa.tcz
download_tcz bzip2-lib.tcz
download_tcz expat2.tcz
download_tcz freetype.tcz
download_tcz glib2.tcz
download_tcz graphite2.tcz
download_tcz harfbuzz.tcz
download_tcz libasound.tcz
download_tcz libdrm.tcz
download_tcz libGLES.tcz
download_tcz liblzma.tcz
download_tcz libpng.tcz
download_tcz libX11.tcz
download_tcz libXau.tcz
download_tcz libXaw.tcz
download_tcz libxcb.tcz
download_tcz libXdmcp.tcz
download_tcz libXext.tcz
download_tcz libXfixes.tcz
download_tcz libxshmfence.tcz
download_tcz libxml2.tcz
download_tcz libXxf86vm.tcz
download_tcz libzstd.tcz
download_tcz llvm19-lib.tcz
download_tcz pcre2.tcz

cd /pianoberry/pianoberry

unzip /build/src/piCore64-15.0.0.zip

PART1_MB_TO_ADD=20
PART2_MB_TO_ADD=32

SECTOR_SIZE=512
PART1_SECTORS_TO_ADD=PART1_SECTORS_TO_ADD=$((PART1_MB_TO_ADD * 1024 * 1024 / SECTOR_SIZE))
PART2_SECTORS_TO_ADD=PART1_SECTORS_TO_ADD=$((PART2_MB_TO_ADD * 1024 * 1024 / SECTOR_SIZE))
PART1_END_OLD=172031                                     # Current end for partition 1
PART1_END_NEW=$((PART1_END_OLD + PART1_SECTORS_TO_ADD))  # New end for partition 1
PART2_START_OLD=172032                                   # Current start of partition 2
PART2_SIZE=32768                                         # Size of partition 2 in sectors
PART2_START_NEW=$((PART1_END_NEW + 1))                   # New start for partition 2

# Add sectors to the image
dd if=/dev/zero bs=512 count=$((PART1_SECTORS_TO_ADD + PART2_SECTORS_TO_ADD)) >> piCore64-15.0.0.img

# Extract partition 2
dd if=piCore64-15.0.0.img of=part2.img bs=${SECTOR_SIZE} skip=${PART2_START_OLD} count=${PART2_SIZE}

# Remove partition 2, recreate it at new offset and expand partition 1
parted --script piCore64-15.0.0.img \
	unit s \
	rm 2 \
	mkpart primary ext4 ${PART2_START_NEW} $((PART2_START_NEW + PART2_SIZE + PART2_SECTORS_TO_ADD - 1)) \
	resizepart 1 ${PART1_END_NEW}

# Add PART2_SECTORS_TO_ADD sectors to part2.img
dd if=/dev/zero bs=512 count=${PART2_SECTORS_TO_ADD} >> part2.img

# Write partition 2 back to the image
dd if=part2.img of=piCore64-15.0.0.img bs=${SECTOR_SIZE} seek=${PART2_START_NEW} conv=notrunc

sync

kpartx -av piCore64-15.0.0.img

fdisk -l piCore64-15.0.0.img  # For debugging

# Mount the image abn extract the loop device name excluding the last two characters (loop0p1 -> loop0)
LOOP=$(kpartx -av piCore64-15.0.0.img | awk 'NR==1 {print substr($3, 1, length($3)-2)}')

echo "Mounting ${LOOP}p1 and ${LOOP}p2"

mkdir -p p1 p2

mount /dev/mapper/${LOOP}p1 p1
mount /dev/mapper/${LOOP}p2 p2

resize2fs /dev/mapper/${LOOP}p1
resize2fs /dev/mapper/${LOOP}p2

# Set hostname
echo -n " pianoberry" > p1/cmdline.txt

cd /build/src

function install_tcz() {
	# Some tczs don't have a .tree file
	if [ ! -f "${1}.tree" ]; then
		cp ${1}* /pianoberry/pianoberry/p2/tce/optional
		return
	fi

	for file in `cat ${1}.tree`; do
		# Don't copy if file exists
		if [ -f "/pianoberry/pianoberry/p2/tce/optional/${file}" ]; then
			continue
		fi

		cp ${file}* /pianoberry/pianoberry/p2/tce/optional

		if echo "${file}" | grep -q "v8.tcz$"; then
			additional_file=$(echo "${file}" | sed 's/v8\.tcz$/v8-16k.tcz/')
			cp ${additional_file}* /pianoberry/pianoberry/p2/tce/optional
		fi
	done
}

install_tcz alsa.tcz
install_tcz bzip2-lib.tcz
install_tcz expat2.tcz
install_tcz freetype.tcz
install_tcz glib2.tcz
install_tcz graphite2.tcz
install_tcz harfbuzz.tcz
install_tcz libasound.tcz
install_tcz libdrm.tcz
install_tcz libGLES.tcz
install_tcz liblzma.tcz
install_tcz libpng.tcz
install_tcz libX11.tcz
install_tcz libXau.tcz
install_tcz libXaw.tcz
install_tcz libxcb.tcz
install_tcz libXdmcp.tcz
install_tcz libXext.tcz
install_tcz libXfixes.tcz
install_tcz libxshmfence.tcz
install_tcz libxml2.tcz
install_tcz libXxf86vm.tcz
install_tcz libzstd.tcz
install_tcz llvm19-lib.tcz
install_tcz pcre2.tcz

# Enable the installed extensions
cat <<EOF >> /pianoberry/pianoberry/p2/tce/onboot.lst
alsa.tcz
alsa-modules-6.6.47-piCore-v8-16k.tcz
bzip2-lib.tcz
expat2.tcz
glib2.tcz
graphite2.tcz
harfbuzz.tcz
freetype.tcz
libasound.tcz
libdrm.tcz
libGLES.tcz
liblzma.tcz
libpng.tcz
libX11.tcz
libXau.tcz
libxcb.tcz
libXdmcp.tcz
libXext.tcz
libXfixes.tcz
libxshmfence.tcz
libxml2.tcz
libXxf86vm.tcz
libzstd.tcz
llvm19-lib.tcz
mesa.tcz
pcre2.tcz
EOF

# Disable internal sound card
sed -i 's/dtparam=audio=on/#dtparam=audio=on/g' /pianoberry/pianoberry/p1/config.txt

# Unpack the rootfs
mkdir -p /pianoberry/pianoberry/tempdir
cd /pianoberry/pianoberry/tempdir
zcat ../p1/rootfs-piCore64-15.0.gz | cpio -i

# Add Pianoteq configs
mkdir -p root/.config/Modartt
mkdir -p root/.local/share/Modartt/Pianoteq/MidiMappings

install -m 644 ../Pianoteq84.prefs root/.config/Modartt/
install -m 644 ../midi-map.ptm root/.local/share/Modartt/Pianoteq/MidiMappings/

# Add Pianoteq binary
install -m 777 "../Pianoteq 8" usr/bin/
chmod +x "usr/bin/Pianoteq 8"

mkdir -p /pianoberry/pianoberry/mydata
cd /pianoberry/pianoberry/mydata
tar -xpvzf ../mydata.tgz

# Start Pianoteq on boot
if [ -z "${PIANOTEQ_SERIAL}" ]; then  # If PIANOTEQ_SERIAL is empty
cat <<EOF >> bootlocal.sh
sudo "/usr/bin/Pianoteq 8" --headless --preset "${PIANOTEQ_INITIAL_PRESET}" --midimapping "midi-map"
EOF
else  # If PIANOTEQ_SERIAL is set
cat <<EOF >> bootlocal.sh
if [ ! -f "/usr/local/share/.activated" ]; then
	sudo "/usr/bin/Pianoteq 8" --headless --activate pianoberry:$PIANOTEQ_SERIAL
	if [[ $? -eq 0 ]]; then
		touch /usr/local/share/.activated
		sudo filetool.sh -b
		sudo reboot
	fi
else
	sudo "/usr/bin/Pianoteq 8" --headless --preset "${PIANOTEQ_INITIAL_PRESET}" --midimapping "midi-map"
fi
EOF
fi

tar -cpvzf ../mydata.tgz .

cd /pianoberry/pianoberry

cp mydata.tgz p2/tce/

# Load pianoberry rootfs instead of the original one
sed -i 's/rootfs-piCore64-15\.0/rootfs-pianoberry/g' p1/config.txt

# Repack the rootfs
cd tempdir
find . | cpio -o -H newc | gzip > ../rootfs-pianoberry.gz
cd /pianoberry/pianoberry
advdef -z4 rootfs-pianoberry.gz
rm -f p1/rootfs-piCore64-15.0.gz
cp rootfs-pianoberry.gz p1/

sync

umount p1 p2
kpartx -d /dev/${LOOP}

# Copy the image to the host
cp piCore64-15.0.0.img /build/pianoberry.img
